from coolname import generate_slug
from dotenv import load_dotenv
import requests
import asyncssh
import urllib3
import json
import uuid
import os

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

from bot.processors.base_processor import BaseProcessor
from bot.processors.structs import VlessKey


from logger.logging_config import setup_logger

logger = setup_logger()

load_dotenv()

NAME_VPN_CONFIG = "MyNewInbound"


class VlessProcessor(BaseProcessor):
    def __init__(self, ip, password):
        self.ip = None
        self.sub_port = None
        self.port_panel = None
        self.host = None
        self.data = None
        self.ses = None
        self.con = None
        self.server_id = None

    def create_server_session_by_id(func):
        def wrapper(self, *args, **kwargs):
            if self.ses is None:
                if kwargs.get("server_id") is None:
                    raise ValueError(
                        "!!!server_id must be passed as a keyword argument!!!"
                    )
                from bot.initialization.db_processor_init import db_processor

                server_id = kwargs.get("server_id")
                server = db_processor.get_server_by_id(server_id)
                self.ip = server.ip
                self.sub_port = 2096
                self.port_panel = 2053
                self.host = f"http://{self.ip}:{self.port_panel}"
                self.data = {"username": "admin", "password": server.password}
                self.ses = requests.Session()
                self.ses.verify = False
                self.con = self._connect()
            return func(self, *args, **kwargs)

        return wrapper

    async def create_server_session(self):
        from bot.initialization.db_processor_init import db_processor

        server = await db_processor.get_server_with_min_users("vless")

        self.ip = server.ip
        self.sub_port = 2096
        self.port_panel = 2053
        self.host = f"http://{self.ip}:{self.port_panel}"
        self.data = {"username": "admin", "password": server.password}
        self.ses = requests.Session()
        self.ses.verify = False
        self.con = self._connect()
        self.server_id = server.id

    def _connect(self) -> bool:
        """
        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø–∞–Ω–µ–ª–∏.
        """
        try:
            resp = self.ses.post(f"{self.host}/login", data=self.data).json()
            if resp.get("success") is True:
                logger.debug(f"‚úÖ–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏ 3x-ui {self.ip} –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                logger.warning(
                    f'üõë–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏ 3x-ui {self.ip} –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –æ—à–∏–±–∫–∞: {resp.get("msg")}'
                )
                return False
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {self.host}: {e}")
            return False
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON-–æ—Ç–≤–µ—Ç–∞ –æ—Ç {self.host}: {e}")
            return False

    def _check_connect(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ inbound (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ), –∏–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ.
        """
        if not self.con:
            return False

        try:
            resource = self.ses.post(
                f"{self.host}/panel/inbound/list/", data=self.data
            ).json()
            if not resource.get("success"):
                logger.warning(
                    f'üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {resource.get("msg")}'
                )
                return False
            # –ï—Å–ª–∏ inbound'—ã –µ—Å—Ç—å, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if resource.get("obj") and len(resource["obj"]) > 0:
                logger.debug(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å")
                return True

            logger.warning(f"‚ö†Ô∏è–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (inbound) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ _check_connect: {e}")
            return False

    def _add_new_connect(self) -> tuple[bool, str]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π inbound (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ).
        """
        if not self.con:
            return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

        logger.debug(f"–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}...")

        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ (privateKey/publicKey)
        cert_ok, cert_obj_or_msg = self._get_new_x25519_cert()
        if not cert_ok:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å X25519-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {cert_obj_or_msg}")
            return False, cert_obj_or_msg

        private_key = cert_obj_or_msg["privateKey"]
        public_key = cert_obj_or_msg["publicKey"]

        # –®–∞–≥ 2: –°–æ–±–∏—Ä–∞–µ–º JSON –¥–ª—è inbound/add
        header = {"Accept": "application/json"}
        data = {
            "up": 0,
            "down": 0,
            "total": 0,
            "remark": NAME_VPN_CONFIG,  # –ù–∞–∑–≤–∞–Ω–∏–µ inbound
            "enable": True,
            "expiryTime": 0,
            "listen": "",
            "port": 46408,
            "protocol": "vless",
            "settings": json.dumps(
                {
                    "clients": [
                        {
                            "id": "test1",
                            "flow": "xtls-rprx-vision",
                            "email": "test1",
                            "limitIp": 0,
                            "totalGB": 0,
                            "expiryTime": 0,
                            "enable": True,
                            "tgId": "",
                            "subId": "yap2ddklr1imbhfq",
                        }
                    ],
                    "decryption": "none",
                    "fallbacks": [],
                }
            ),
            "streamSettings": json.dumps(
                {
                    "network": "tcp",
                    "security": "reality",
                    "realitySettings": {
                        "show": False,
                        "xver": 0,
                        "dest": "google.com:443",
                        "serverNames": ["google.com", "www.google.com"],
                        "privateKey": private_key,
                        "minClient": "",
                        "maxClient": "",
                        "maxTimediff": 0,
                        "shortIds": [
                            "03b090ff397c50b9",
                            "7ea960",
                            "765c89c0ab102d",
                            "b5b79d7c18f0",
                            "1f52d659ec",
                            "4da9671e",
                            "45a0",
                            "d3",
                        ],  # –ö–æ—Ä–æ—Ç–∫–∏–π ID
                        "settings": {
                            "publicKey": public_key,
                            "fingerprint": "chrome",
                            "serverName": "",
                            "spiderX": "/",
                        },
                    },
                    "tcpSettings": {
                        "acceptProxyProtocol": False,
                        "header": {"type": "none"},
                    },
                }
            ),
            "sniffing": json.dumps({"enabled": False, "destOverride": []}),
        }

        # –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º inbound
        try:
            response = self.ses.post(
                f"{self.host}/panel/inbound/add", headers=header, json=data
            ).json()
            if response.get("success"):
                logger.debug(f"–î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}")
                return True, response["obj"]
            else:
                msg = response.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.warning(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {msg}")
                return False, msg
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ inbound: {e}")
            return False, str(e)

    def _get_new_x25519_cert(self) -> tuple[bool, dict]:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–∞–Ω–µ–ª–∏ –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π (privateKey / publicKey).
        """
        if not self.con:
            return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

        try:
            response = self.ses.post(
                f"{self.host}/server/getNewX25519Cert", data=self.data
            ).json()
            if response.get("success"):
                return True, response["obj"]
            else:
                return False, response.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ X25519Cert: {e}")
            return False, str(e)

    def _get_link(self, key_id, key_name, isIOS=False):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (vless://...).
        """

        if not self.con:
            return False

        try:
            resource = self.ses.post(
                f"{self.host}/panel/inbound/list/", data=self.data
            ).json()
            if not resource.get("success"):
                return False

            # –ü–µ—Ä–≤—ã–π inbound
            inbound_obj = resource["obj"][0] if resource["obj"] else None
            if not inbound_obj:
                return False

            # –î–æ—Å—Ç–∞—ë–º "streamSettings" –∏ –ø–∞—Ä—Å–∏–º –∫–∞–∫ JSON
            stream_settings_str = inbound_obj.get("streamSettings")
            if not stream_settings_str:
                return False

            stream_settings = json.loads(stream_settings_str)
            port = inbound_obj.get("port", 443)

            reality = stream_settings.get("realitySettings", {})
            sett = reality.get("settings", {})
            public_key = sett.get("publicKey", "")
            sni = "www.google.com"
            flow = stream_settings.get("flow", "xtls-rprx-vision")
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É

            if isIOS:
                prev_text = f"https://{self.ip}/v?c=streisand://import/"
                bottom_text = f"&name={key_id}"
            else:
                prev_text = ""
                bottom_text = f"#{key_name}"
            sid = "03b090ff397c50b9"
            # –ó–¥–µ—Å—å –ø–æ—Ä—Ç 443, fingerprint=chrome, sni=vk.com

            res = (
                f"{prev_text}vless://{key_id}@{self.ip}:{port}/?type=tcp&security=reality&pbk={public_key}"
                f"&fp=chrome&sni=www.google.com&sid={sid}&spx=%2F&flow={flow}{bottom_text}"
            )
            return res
        except (requests.RequestException, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
            return False

    async def create_vpn_key(
        self, expire_time=0, sni="dl.google.com", port=46408
    ) -> tuple[VlessKey, int]:
        await self.create_server_session()
        if not self.con:
            return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

        header = {"Accept": "application/json"}

        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        # id=1 ‚Äî —ç—Ç–æ ID inbound'–∞ (–µ—Å–ª–∏ —É –≤–∞—Å –±–æ–ª—å—à–µ inbound'–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ)
        import json

        key_name = generate_slug(2).replace("-", " ")

        unique_id = str(uuid.uuid4())
        data = {
            "id": 1,
            "settings": json.dumps(
                {
                    "clients": [
                        {
                            "id": unique_id,  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                            "alterId": 0,
                            "email": unique_id,  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–∏
                            "limitIp": 1,
                            "totalGB": 0,
                            "expiryTime": expire_time,
                            "enable": True,
                            "tgId": "",
                            "subId": unique_id,
                            "flow": "xtls-rprx-vision",
                            "comment": key_name,  # –∏–º—è –∫–ª—é—á–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                        }
                    ]
                }
            ),
        }

        command = "/panel/inbound/addClient"

        resource = self.ses.post(
            f"{self.host}/panel/inbound/list/", data=self.data
        ).json()

        inbound_obj = resource["obj"][0] if resource["obj"] else None

        stream_settings_str = inbound_obj.get("streamSettings")
        stream_settings = json.loads(stream_settings_str)

        reality = stream_settings.get("realitySettings", {})
        sett = reality.get("settings", {})
        public_key = sett.get("publicKey", "")
        sni = "dl.google.com"
        flow = stream_settings.get("flow", "xtls-rprx-vision")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É

        prev_text = ""
        bottom_text = f"#{key_name}"
        sid = "03b090ff397c50b9"
        # –ó–¥–µ—Å—å –ø–æ—Ä—Ç 443, fingerprint=chrome, sni=vk.com

        access_url = (
            f"{prev_text}vless://{unique_id}@{self.ip}:{port}/?type=tcp&security=reality&pbk={public_key}"
            f"&fp=chrome&sni=www.google.com&sid={sid}&spx=%2F&flow={flow}{bottom_text}"
        )

        try:
            resource = self.ses.post(
                f"{self.host}{command}", headers=header, json=data
            ).json()
            if resource.get("success"):
                logger.debug(f"–î–æ–±–∞–≤–∏–ª–∏ –∫–ª—é—á {unique_id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}")
                return (
                    VlessKey(
                        key_id=unique_id,
                        email=unique_id,
                        name=key_name,
                        access_url=access_url,
                        used_bytes=0,
                        data_limit=None,
                    ),
                    self.server_id,
                )
            else:
                msg = resource.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.warning(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {unique_id}: {msg}")
                return False, msg
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
            return False, str(e)

    async def rename_key(self, key_id: str, server_id, new_key_name: str) -> bool:
        if not self.con:
            return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

        logger.debug(f"–û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á {key_id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}...")

        header = {"Accept": "application/json"}

        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        # id=1 ‚Äî —ç—Ç–æ ID inbound'–∞ (–µ—Å–ª–∏ —É –≤–∞—Å –±–æ–ª—å—à–µ inbound'–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ)
        import json

        data = {
            "id": 1,
            "settings": json.dumps(
                {
                    "clients": [
                        {
                            "id": key_id,  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                            "alterId": 0,  # —Ç—É—Ç –±—É–¥–µ—Ç –∏–º—è –∫–ª—é—á–∞
                            "email": key_id,  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–∏
                            "limitIp": 1,
                            "totalGB": 0,
                            "expiryTime": 0,
                            "enable": "true",
                            "tgId": "",
                            "subId": key_id,
                            "flow": "xtls-rprx-vision",
                            "comment": new_key_name,
                        }
                    ]
                }
            ),
        }

        command = f"/panel/inbound/updateClient/{key_id}"

        try:
            resource = self.ses.post(
                f"{self.host}{command}", headers=header, json=data
            ).json()
            if resource.get("success"):
                logger.debug(f"–û–±–Ω–æ–≤–∏–ª–∏ –∫–ª—é—á {key_id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}")
                return True
            else:
                msg = resource.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.warning(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key_id}: {msg}")
                return False

        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
            return False, str(e)

    # def add_or_update_key(self, vpn_key, is_update=False, is_activ=True):
    #     """
    #     –î–æ–±–∞–≤–ª—è–µ—Ç (isUpdate=False) –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç (isUpdate=True) –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω—É–∂–Ω—ã–º id (vpn_key).
    #     –ü–∞—Ä–∞–º–µ—Ç—Ä isActiv=True/False –≤–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
    #     """
    #     if not self.con:
    #         return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
    #
    #     if not is_update:
    #         logger.debug(f"–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á {vpn_key} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}...")
    #     else:
    #         logger.debug(f"–û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á {vpn_key} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}...")
    #
    #     header = {"Accept": "application/json"}
    #
    #     if is_activ:
    #         is_activ_str = "true"
    #     else:
    #         is_activ_str = "false"
    #
    #     # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    #     # id=1 ‚Äî —ç—Ç–æ ID inbound'–∞ (–µ—Å–ª–∏ —É –≤–∞—Å –±–æ–ª—å—à–µ inbound'–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ)
    #     import json
    #
    #     unique_id = str(uuid.uuid4())
    #     data = {
    #         "id": 1,
    #         "settings": json.dumps(
    #             {
    #                 "clients": [
    #                     {
    #                         "id": vpn_key,  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    #                         "alterId": 0,  # —Ç—É—Ç –±—É–¥–µ—Ç –∏–º—è –∫–ª—é—á–∞
    #                         "email": unique_id,  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–∏
    #                         "limitIp": 1,
    #                         "totalGB": 0,
    #                         "expiryTime": 0,
    #                         "enable": is_activ_str,
    #                         "tgId": "",
    #                         "subId": vpn_key,
    #                         "flow": "xtls-rprx-vision",
    #                     }
    #                 ]
    #             }
    #         ),
    #     }
    #
    #     # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É
    #     if not is_update:
    #         command = "/panel/inbound/addClient"
    #     else:
    #         command = f"/panel/inbound/updateClient/{vpn_key}"
    #
    #     try:
    #         resource = self.ses.post(
    #             f"{self.host}{command}", headers=header, json=data
    #         ).json()
    #         if resource.get("success"):
    #             if not is_update:
    #                 logger.debug(f"–î–æ–±–∞–≤–∏–ª–∏ –∫–ª—é—á {vpn_key} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}")
    #             else:
    #                 logger.debug(f"–û–±–Ω–æ–≤–∏–ª–∏ –∫–ª—é—á {vpn_key} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}")
    #             return True, self._get_link(vpn_key, isIOS)
    #         else:
    #             msg = resource.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    #             if not is_update:
    #                 logger.warning(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {vpn_key}: {msg}")
    #             else:
    #                 logger.warning(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {vpn_key}: {msg}")
    #             return False, msg
    #     except requests.RequestException as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
    #         return False, str(e)

    @create_server_session_by_id
    async def delete_key(self, key_id, server_id=None) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º vpn_key —É inbound ID=1.
        """
        if not self.con:
            return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

        logger.debug(f"–£–¥–∞–ª—è–µ–º –∫–ª—é—á c id{key_id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}...")

        try:
            # /panel/inbound/<id>/delClient/<email>
            response = self.ses.post(
                f"{self.host}/panel/inbound/1/delClient/{key_id}", data=self.data
            ).json()
            if response.get("success"):
                logger.debug(f"–£–¥–∞–ª–∏–ª–∏ –∫–ª—é—á {key_id}")
                return True
            else:
                msg = response.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.warning(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key_id}: {msg}")
                return False, msg
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
            return False

    @create_server_session_by_id
    async def get_key_info(self, key_id: str, server_id: int = None) -> VlessKey:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ key_id –∏
        –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç VlessKey.
        """
        if not self.con:
            logger.warning(f"–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return None

        try:
            response = self.ses.post(
                f"{self.host}/panel/inbound/list/", data=self.data
            ).json()
            if not response.get("success"):
                logger.warning(
                    f'üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π: {response.get("msg")}'
                )
                return None

            # –ò—â–µ–º –∫–ª—é—á –≤ —Å–ø–∏—Å–∫–µ inbound'–æ–≤
            for inbound in response.get("obj", []):
                clients = json.loads(inbound.get("settings", "{}")).get("clients", [])

                for client in clients:
                    if client.get("id") == key_id:
                        return VlessKey(
                            key_id=client.get("id"),
                            name=client.get("comment", ""),
                            email=client.get("email", ""),
                            access_url=self._get_link(
                                client.get("id"), client.get("comment", "")
                            ),
                            used_bytes=client.get("up", 0) + client.get("down", 0),
                            data_limit=(
                                client.get("totalGB") * 1024 * 1024 * 1024
                                if client.get("totalGB")
                                else None
                            ),
                        )

            logger.warning(f"–ö–ª—é—á {key_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            return None

        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ {key_id}: {e}")
            return None
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON-–æ—Ç–≤–µ—Ç–∞: {e}")
            return None

    async def setup_server_vless(self, server):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ 3X-UI —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö"""

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker-—Å–µ—Ä–≤–∏—Å–æ–≤
        stop_docker_cmds = [
            "sudo systemctl stop docker",
            "sudo systemctl stop docker.socket",
            "sudo systemctl stop containerd",
            "sudo systemctl stop containerd.socket",
            "sudo killall -9 dockerd containerd",
            "sudo apt remove --purge -y docker docker.io containerd runc",
            "sudo umount /var/run/docker/netns/default || true",
            "sudo rm -rf /var/lib/docker /etc/docker /var/run/docker*",
        ]

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ Docker (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)
        remove_docker_cmds = [
            "sudo apt update",
            "sudo apt install -y ca-certificates curl gnupg lsb-release",
            "sudo install -m 0755 -d /etc/apt/keyrings",
            "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null",
            "sudo chmod a+r /etc/apt/keyrings/docker.asc",
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            "sudo rm -f /etc/apt/sources.list.d/docker.list",
            "apt remove --purge -y docker docker-engine docker.io containerd runc",
            "rm -rf /var/lib/docker /etc/docker /var/run/docker*",
        ]

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker –∏ Docker Compose
        install_docker_cmds = [
            "sudo apt update",
            "apt install -y apt-transport-https ca-certificates curl software-properties-common",
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker –¥–ª—è Ubuntu 22.04 (jammy)
            "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null",
            "sudo chmod a+r /etc/apt/keyrings/docker.asc",
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
            "sudo rm -f /etc/apt/sources.list.d/docker.list",
            "echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu jammy stable' | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null",
            "sudo apt update",
            "apt install -y docker-ce docker-ce-cli containerd.io",
            'curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose',
            "sudo chmod +x /usr/local/bin/docker-compose",
        ]

        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è setup.sh
        setup_script = "curl -sSL https://raw.githubusercontent.com/torikki-tou/team418/main/setup.sh -o setup.sh && chmod +x setup.sh"
        vless_password = os.getenv("VLESS_PASSWORD")
        vless_email = os.getenv("VLESS_EMAIL")
        vless_bot_token = os.getenv("VLESS_BOT_TOKEN")
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ setup.sh (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å)
        setup_answers = (
            "\n".join(
                [
                    "admin",  # –õ–æ–≥–∏–Ω
                    vless_password,  # –ü–∞—Ä–æ–ª—å
                    "2052",  # –ü–æ—Ä—Ç 3X-UI
                    server.ip,  # IP/–¥–æ–º–µ–Ω
                    vless_email,  # Email
                    vless_bot_token,  # Telegram Bot Token
                    "lisa_helper",  # Telegram admin profile
                    "y",  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ñ–∏–≥–∞
                ]
            )
            + "\n"
        )

        try:
            async with asyncssh.connect(
                host=server.ip,
                username="root",
                password=server.password,
                known_hosts=None,
            ) as conn:
                logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É {server['ip']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ Docker
                logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π Docker...")
                for cmd in stop_docker_cmds:
                    logger.info(f"‚û° –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
                    result = await conn.run(cmd, check=False)
                    if result.exit_status != 0:
                        logger.warning(
                            f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {cmd}: {result.stderr.strip()}"
                        )

                logger.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π Docker (–æ—á–∏—Å—Ç–∫–∞)...")
                for cmd in remove_docker_cmds:
                    logger.info(f"‚û° –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
                    result = await conn.run(cmd, check=False)
                    if result.exit_status != 0:
                        logger.warning(
                            f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {cmd}: {result.stderr.strip()}"
                        )
                    else:
                        logger.info(result.stdout)

                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ Docker
                logger.info("‚¨á –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∏ Docker Compose...")
                for cmd in install_docker_cmds:
                    logger.info(f"‚û° –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
                    result = await conn.run(cmd, check=False)
                    if result.exit_status != 0:
                        raise Exception(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Docker: {cmd}\n{result.stderr.strip()}"
                        )
                    logger.info(result.stdout)

                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ setup.sh
                logger.info("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º setup.sh...")
                result = await conn.run(setup_script)
                if result.exit_status != 0:
                    raise Exception(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ setup.sh: {result.stderr.strip()}"
                    )
                logger.info(result.stdout)

                # –ó–∞–ø—É—Å–∫ setup.sh —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–≤–æ–¥–æ–º –æ—Ç–≤–µ—Ç–æ–≤
                logger.info("‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º setup.sh —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö...")
                result = await conn.run('bash -c "./setup.sh"', input=setup_answers)
                if result.exit_status != 0:
                    raise Exception(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ 3X-UI: {result.stderr.strip()}"
                    )
                logger.info(result.stdout)

                logger.success(
                    f"üéâ 3X-UI —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ {server['ip']}:2052"
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ {server['ip']}: {e}")
            return False

        return True

    def get_server_info(self, server) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ:
        {
            "name": "My Server",
            "serverId": "7fda0079-5317-4e5a-bb41-5a431dddae21",
            "metricsEnabled": true,
            "createdTimestampMs": 1536613192052,
            "version": "1.0.0",
            "accessKeyDataLimit": {"bytes": 8589934592},
            "portForNewAccessKeys": 1234,
            "hostnameForAccessKeys": "example.com"
        }
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–∞–Ω–µ–ª–∏
        self.ip = server.ip
        self.port_panel = 2052
        self.host = f"https://{self.ip}:{self.port_panel}"
        self.data = {"username": "admin", "password": server.password}
        self.ses = requests.Session()
        self.ses.verify = False

        if not self._connect():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞")

        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
            response = self.ses.post(f"{self.host}/server/info", data=self.data).json()
            if response.get("success"):
                return response.get("obj", {})
            else:
                raise Exception(
                    response.get("msg", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ")
                )
        except requests.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
