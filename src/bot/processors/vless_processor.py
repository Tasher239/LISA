import json
import time
from dataclasses import dataclass

import requests
import uuid

from bot.processors.base_processor import BaseProcessor
from logger.logging_config import setup_logger

logger = setup_logger()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ)
NAME_VPN_CONFIG = "MyNewInbound"


@dataclass
class VlessKey:
    """
    Describes a key in the VLESS server
    """

    key_id: str
    name: str
    access_url: str
    used_bytes: int
    data_limit: int | None


class VlessProcessor(BaseProcessor):
    def __init__(self, ip, password):
        self.ip = ip
        # –ü–æ—Ä—Ç —Å–∞–±—Å–∫—Ä–∏–ø—Ü–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º (2096). –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ:
        self.sub_port = 2096

        # –ü–æ—Ä—Ç –ø–∞–Ω–µ–ª–∏ 3x-ui (–∏–ª–∏ –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏)
        self.port_panel = 2053

        self.host = f"http://{self.ip}:{self.port_panel}/mypanel"

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin (–∏–ª–∏ root), –ø–∞—Ä–æ–ª—å –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
        self.data = {"username": "admin", "password": password}

        self.ses = requests.Session()

        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–æ–µ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        self.ses.verify = False

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏
        self.con = self._connect()

        # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω—É–∂–Ω—ã–π inbound;
        # –ï—Å–ª–∏ –Ω–µ—Ç - –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å.
        if self.con:
            if not self._check_connect():
                self._add_new_connect()
        else:
            logger.warning(
                f"üõë–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏ 3x-ui {self.ip} –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞)."
            )

    def _connect(self) -> bool:
        """
        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø–∞–Ω–µ–ª–∏.
        """
        try:
            resp = self.ses.post(f"{self.host}/login", data=self.data).json()
            if resp.get("success") is True:
                logger.debug(f"‚úÖ–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏ 3x-ui {self.ip} –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                logger.warning(
                    f'üõë–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏ 3x-ui {self.ip} –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –æ—à–∏–±–∫–∞: {resp.get("msg")}'
                )
                return False
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {self.host}: {e}")
            return False
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON-–æ—Ç–≤–µ—Ç–∞ –æ—Ç {self.host}: {e}")
            return False

    def _check_connect(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ inbound (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ), –∏–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ.
        """
        if not self.con:
            return False

        try:
            resource = self.ses.post(
                f"{self.host}/panel/inbound/list/", data=self.data
            ).json()
            if not resource.get("success"):
                logger.warning(
                    f'üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {resource.get("msg")}'
                )
                return False
            # –ï—Å–ª–∏ inbound'—ã –µ—Å—Ç—å, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if resource.get("obj") and len(resource["obj"]) > 0:
                logger.debug(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å")
                return True

            logger.warning(f"‚ö†Ô∏è–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (inbound) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ _check_connect: {e}")
            return False

    def _add_new_connect(self) -> tuple[bool, str]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π inbound (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ).
        """
        if not self.con:
            return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

        logger.debug(f"–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}...")

        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ (privateKey/publicKey)
        cert_ok, cert_obj_or_msg = self._get_new_x25519_cert()
        if not cert_ok:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å X25519-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {cert_obj_or_msg}")
            return False, cert_obj_or_msg

        private_key = cert_obj_or_msg["privateKey"]
        public_key = cert_obj_or_msg["publicKey"]

        # –®–∞–≥ 2: –°–æ–±–∏—Ä–∞–µ–º JSON –¥–ª—è inbound/add
        header = {"Accept": "application/json"}
        data = {
            "up": 0,
            "down": 0,
            "total": 0,
            "remark": NAME_VPN_CONFIG,  # –ù–∞–∑–≤–∞–Ω–∏–µ inbound
            "enable": True,
            "expiryTime": 0,
            "listen": "",
            "port": 443,
            "protocol": "vless",
            "settings": json.dumps(
                {
                    "clients": [
                        {
                            "id": "test1",
                            "flow": "",
                            "email": "test1",
                            "limitIp": 0,
                            "totalGB": 0,
                            "expiryTime": 0,
                            "enable": True,
                            "tgId": "",
                            "subId": "yap2ddklr1imbhfq",
                        }
                    ],
                    "decryption": "none",
                    "fallbacks": [],
                }
            ),
            "streamSettings": json.dumps(
                {
                    "network": "tcp",
                    "security": "reality",
                    "realitySettings": {
                        "show": False,
                        "xver": 0,
                        "dest": "vk.com:443",
                        "serverNames": ["vk.com", "www.vk.com"],
                        "privateKey": private_key,
                        "minClient": "",
                        "maxClient": "",
                        "maxTimediff": 0,
                        "shortIds": ["ffffffffff"],  # –ö–æ—Ä–æ—Ç–∫–∏–π ID
                        "settings": {
                            "publicKey": public_key,
                            "fingerprint": "chrome",
                            "serverName": "",
                            "spiderX": "/",
                        },
                    },
                    "tcpSettings": {
                        "acceptProxyProtocol": False,
                        "header": {"type": "none"},
                    },
                }
            ),
            "sniffing": json.dumps(
                {"enabled": True, "destOverride": ["http", "tls", "quic", "fakedns"]}
            ),
        }

        # –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º inbound
        try:
            response = self.ses.post(
                f"{self.host}/panel/inbound/add", headers=header, json=data
            ).json()
            if response.get("success"):
                logger.debug(f"–î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}")
                return True, response["obj"]
            else:
                msg = response.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.warning(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {msg}")
                return False, msg
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ inbound: {e}")
            return False, str(e)

    def _get_new_x25519_cert(self) -> tuple[bool, dict]:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–∞–Ω–µ–ª–∏ –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π (privateKey / publicKey).
        """
        if not self.con:
            return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

        try:
            response = self.ses.post(
                f"{self.host}/server/getNewX25519Cert", data=self.data
            ).json()
            if response.get("success"):
                return True, response["obj"]
            else:
                return False, response.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ X25519Cert: {e}")
            return False, str(e)

    def _get_link(self, vpn_key, isIOS=False):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (vless://...).
        """

        if not self.con:
            return False

        try:
            resource = self.ses.post(
                f"{self.host}/panel/inbound/list/", data=self.data
            ).json()
            if not resource.get("success"):
                return False

            # –ü–µ—Ä–≤—ã–π inbound
            inbound_obj = resource["obj"][0] if resource["obj"] else None
            if not inbound_obj:
                return False

            # –î–æ—Å—Ç–∞—ë–º "streamSettings" –∏ –ø–∞—Ä—Å–∏–º –∫–∞–∫ JSON
            stream_settings_str = inbound_obj.get("streamSettings")
            if not stream_settings_str:
                return False

            stream_settings = json.loads(stream_settings_str)

            print(stream_settings)

            reality = stream_settings.get("realitySettings", {})
            sett = reality.get("settings", {})
            public_key = sett.get("publicKey", "")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            if isIOS:
                prev_text = f"http://{self.ip}/v?c=streisand://import/"
                bottom_text = f"&name={vpn_key}"
            else:
                prev_text = ""
                bottom_text = f"#{vpn_key}"

            # –ó–¥–µ—Å—å –ø–æ—Ä—Ç 443, fingerprint=chrome, sni=vk.com
            res = (
                f"{prev_text}vless://{vpn_key}@{self.ip}:443?type=tcp&security=reality"
                f"&fp=chrome&pbk={public_key}&sni=vk.com&sid=ffffffffff&spx=%2F{bottom_text}"
            )
            return res
        except (requests.RequestException, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
            return False

    def create_vpn_key(self, expire_time = 0) -> str:
        if not self.con:
            return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

        header = {"Accept": "application/json"}

        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        # id=1 ‚Äî —ç—Ç–æ ID inbound'–∞ (–µ—Å–ª–∏ —É –≤–∞—Å –±–æ–ª—å—à–µ inbound'–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ)
        import json

        unique_id = str(uuid.uuid4())
        data = {
            "id": 1,
            "settings": json.dumps(
                {
                    "clients": [
                        {
                            "id": unique_id,  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                            "alterId": unique_id,
                            # —Ç—É—Ç –±—É–¥–µ—Ç –∏–º—è –∫–ª—é—á–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥—é—Å—å –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å
                            "email": unique_id,  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–∏
                            "limitIp": 1,
                            "totalGB": 0,
                            "expiryTime": expire_time,
                            "enable": "true",
                            "tgId": "",
                            "subId": unique_id,
                            "flow": "xtls-rprx-vision",
                            "comment": "–ò–º—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞",
                        }
                    ]
                }
            ),
        }

        command = "/panel/inbound/addClient"

        try:
            resource = self.ses.post(
                f"{self.host}{command}", headers=header, json=data
            ).json()
            if resource.get("success"):
                logger.debug(f"–î–æ–±–∞–≤–∏–ª–∏ –∫–ª—é—á {unique_id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}")
                return VlessKey(
                    key_id=unique_id,
                    name=unique_id[:5],
                    access_url=self._get_link(unique_id),
                    used_bytes=0,
                    data_limit=None,
                )
            else:
                msg = resource.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.warning(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {unique_id}: {msg}")
                return False, msg
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
            return False, str(e)

    def rename_key(self, key_id: str, new_key_name: str) -> bool:
        if not self.con:
            return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

        logger.debug(f"–û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á {key_id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}...")

        header = {"Accept": "application/json"}

        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        # id=1 ‚Äî —ç—Ç–æ ID inbound'–∞ (–µ—Å–ª–∏ —É –≤–∞—Å –±–æ–ª—å—à–µ inbound'–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ)
        import json

        data = {
            "id": 1,
            "settings": json.dumps(
                {
                    "clients": [
                        {
                            "id": key_id,  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                            "alterId": new_key_name,  # —Ç—É—Ç –±—É–¥–µ—Ç –∏–º—è –∫–ª—é—á–∞
                            "email": key_id,  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–∏
                            "limitIp": 1,
                            "totalGB": 0,
                            "expiryTime": 0,
                            "enable": "true",
                            "tgId": "",
                            "subId": key_id,
                            "flow": "xtls-rprx-vision",
                        }
                    ]
                }
            ),
        }

        command = f"/panel/inbound/updateClient/{key_id}"

        try:
            resource = self.ses.post(
                f"{self.host}{command}", headers=header, json=data
            ).json()
            if resource.get("success"):
                logger.debug(f"–û–±–Ω–æ–≤–∏–ª–∏ –∫–ª—é—á {key_id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}")
                return True
            else:
                msg = resource.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.warning(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key_id}: {msg}")
                return False

        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
            return False, str(e)

    def add_or_update_key(self, vpn_key, is_update=False, is_activ=True):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç (isUpdate=False) –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç (isUpdate=True) –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω—É–∂–Ω—ã–º id (vpn_key).
        –ü–∞—Ä–∞–º–µ—Ç—Ä isActiv=True/False –≤–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
        """
        if not self.con:
            return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

        if not is_update:
            logger.debug(f"–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á {vpn_key} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}...")
        else:
            logger.debug(f"–û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á {vpn_key} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}...")

        header = {"Accept": "application/json"}

        if is_activ:
            is_activ_str = "true"
        else:
            is_activ_str = "false"

        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        # id=1 ‚Äî —ç—Ç–æ ID inbound'–∞ (–µ—Å–ª–∏ —É –≤–∞—Å –±–æ–ª—å—à–µ inbound'–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ)
        import json

        unique_id = str(uuid.uuid4())
        data = {
            "id": 1,
            "settings": json.dumps(
                {
                    "clients": [
                        {
                            "id": vpn_key,  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                            "alterId": "aboba",  # —Ç—É—Ç –±—É–¥–µ—Ç –∏–º—è –∫–ª—é—á–∞
                            "email": unique_id,  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–∏
                            "limitIp": 1,
                            "totalGB": 0,
                            "expiryTime": 0,
                            "enable": is_activ_str,
                            "tgId": "",
                            "subId": vpn_key,
                            "flow": "xtls-rprx-vision",
                        }
                    ]
                }
            ),
        }

        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É
        if not is_update:
            command = "/panel/inbound/addClient"
        else:
            command = f"/panel/inbound/updateClient/{vpn_key}"

        try:
            resource = self.ses.post(
                f"{self.host}{command}", headers=header, json=data
            ).json()
            if resource.get("success"):
                if not is_update:
                    logger.debug(f"–î–æ–±–∞–≤–∏–ª–∏ –∫–ª—é—á {vpn_key} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}")
                else:
                    logger.debug(f"–û–±–Ω–æ–≤–∏–ª–∏ –∫–ª—é—á {vpn_key} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}")
                return True, self._get_link(vpn_key, isIOS)
            else:
                msg = resource.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                if not is_update:
                    logger.warning(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {vpn_key}: {msg}")
                else:
                    logger.warning(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {vpn_key}: {msg}")
                return False, msg
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
            return False, str(e)

    def delete_key(self, vpn_key):
        """
        –£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º vpn_key —É inbound ID=1.
        """
        if not self.con:
            return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

        logger.debug(f"–£–¥–∞–ª—è–µ–º –∫–ª—é—á {vpn_key} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.ip}...")

        try:
            # /panel/inbound/<id>/delClient/<email>
            response = self.ses.post(
                f"{self.host}/panel/inbound/1/delClient/{vpn_key}", data=self.data
            ).json()
            if response.get("success"):
                logger.debug(f"–£–¥–∞–ª–∏–ª–∏ –∫–ª—é—á {vpn_key}")
                return True, "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ"
            else:
                msg = response.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.warning(f"üõë–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {vpn_key}: {msg}")
                return False, msg
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
            return False, str(e)

    def get_key_info(self, key_id: str) -> VlessKey:
        link = self._get_link(key_id)
        if not link:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∫–ª—é—á–∞ {key_id}")
            return None

        return VlessKey(
            key_id=key_id,
            name="test",
            access_url=link,
            used_bytes=0,
            data_limit=None,
        )

