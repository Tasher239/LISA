from datetime import datetime
import os
import json
import logging

from aiogram.types import FSInputFile
from initialization.bot_init import bot

logger = logging.getLogger(__name__)

try:
    admin_ids_str = os.getenv("ADMIN_IDS", "[]")
    ADMIN_IDS = list(map(int, json.loads(admin_ids_str)))
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ADMIN_IDS: {e}")
    ADMIN_IDS = []


async def send_error_report(error: Exception, log_file_path: str = "logger/bot.log"):
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –ª–æ–≥-—Ñ–∞–π–ª.

    :param error: –ü—Ä–æ–∏–∑–æ—à–µ–¥—à–∞—è –æ—à–∏–±–∫–∞ (Exception).
    :param log_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "logger/bot.log").
    """
    error_text = (
        f"üö® *–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:*\n"
        f"`{error}`\n"
        f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    for admin_id in ADMIN_IDS:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏
            await bot.send_message(admin_id, error_text, parse_mode="Markdown")
            # –ï—Å–ª–∏ –ª–æ–≥-—Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            if os.path.exists(log_file_path):
                log_file = FSInputFile(log_file_path)
                await bot.send_document(admin_id, document=log_file, caption="–õ–æ–≥-—Ñ–∞–π–ª")
        except Exception as ex:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {ex}")
