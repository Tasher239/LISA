import sys
import json
import uuid
import logging
import asyncio

import os
from src.database.user_db import DbProcessor

db_processor = DbProcessor()
session = db_processor.Session()

from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram import types

from outline_vpn.outline_vpn import OutlineVPN

from bot.keyboards.keyboards import main_menu_keyboard, period_keyboard, get_installation_button
from bot.fsm.states import GetKey
from bot.utils.outline_processor import OutlineProcessor
from dotenv import load_dotenv
from datetime import datetime

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()
api_url = os.getenv('API_URL')
cert_sha256 = os.getenv('CERT_SHA')
client = OutlineVPN(api_url=api_url, cert_sha256=cert_sha256)
outline_processor = OutlineProcessor(client)
BOT_TOKEN = os.getenv('TOKEN')
provider_token = os.getenv('PROVIDER_SBER_TOKEN')
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)


# 'stop_time' - ISO 8601
user_db = [{'user_id': 234, 'stop_time': '01-02-2024', 'use_trial_period': True}]

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
get_key = InlineKeyboardButton(
    text='‚Ä¢	–ü–æ–ª—É—á–∏—Ç—å –ö–ª—é—á',
    callback_data='get_keys_pressed'
)

ket_management = InlineKeyboardButton(
    text='‚Ä¢	–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏',
    callback_data='key_management_pressed'
)

main_menu_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[get_key],
                     [ket_management]]
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
month_button = InlineKeyboardButton(text='‚Ä¢ –ú–µ—Å—è—Ü (1$)', callback_data='1_month')
three_month_button = InlineKeyboardButton(text='‚Ä¢ 3 –ú–µ—Å—è—Ü–∞ (10$)', callback_data='3_months')
six_month_button = InlineKeyboardButton(text='‚Ä¢ 6 –ú–µ—Å—è—Ü–µ–≤ (100$)', callback_data='6_months')
year_button = InlineKeyboardButton(text='‚Ä¢ 12 –ú–µ—Å—è—Ü–µ–≤ (1000$)', callback_data='12_months')

period_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[month_button],
                     [three_month_button],
                     [six_month_button],
                     [year_button]]
)



@dp.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text='–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ '
             '–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç ¬´LISA¬ª. –í—ã–±–µ—Ä–∏—Ç–µ, '
             '—á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å',
        reply_markup=main_menu_keyboard
    )


@dp.callback_query(F.data == 'get_keys_pressed')
async def get_key_handler(callback: CallbackQuery, state: FSMContext):
    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ü–æ–ª—É—á–∏—Ç—å –ö–ª—é—á", –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    await callback.message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞:',
        reply_markup=period_keyboard
    )
    await state.set_state(GetKey.choosing_period)


@dp.callback_query(StateFilter(GetKey.choosing_period))
async def handle_period_selection(callback: CallbackQuery, state: FSMContext):
    selected_period = callback.data.replace('_', ' ').title()
    prices = [LabeledPrice(label="–ö–ª—é—á –æ—Ç VPN", amount=10000)]
    description = f'–ö–ª—é—á –æ—Ç VPN Outline –Ω–∞ {selected_period}'
    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    await state.set_state(GetKey.waiting_for_payment)

    await bot.send_invoice(chat_id=callback.message.chat.id,
                           title='–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞',
                           description=description,
                           payload=str(uuid.uuid4()),
                           provider_token=provider_token,
                           start_parameter=str(uuid.uuid4()),
                           currency='rub',
                           prices=prices)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ–∫–∞ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ –∑–∞—á–µ–º –Ω–∞–º)
'''
–ú–µ—Ç–æ–¥ answer_pre_checkout_query() –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å Telegram –æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.
–í pre_checkout_q.id –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞ PreCheckoutQuery.
–ü–∞—Ä–∞–º–µ—Ç—Ä ok=True —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ (–ø–ª–∞—Ç–µ–∂ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å).
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂, –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ok=False –∏ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä error_message.
'''


@dp.pre_checkout_query()
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.message(StateFilter(GetKey.waiting_for_payment), lambda message: message.successful_payment)

async def successful_payment(message: Message, state: FSMContext):
    try:
        logger.info(json.dumps(message.dict(), indent=4, default=str))
        keys_lst = outline_processor.get_keys()
        max_key_id = max([int(key.key_id) for key in keys_lst])
        key = outline_processor.create_new_key(key_id=max_key_id + 1, name=f'VPN Key{max_key_id + 1}', data_limit_gb=1)

        await message.answer(f'–í–∞—à –∫–ª—é—á –æ—Ç VPN:\naccess_url: {key.access_url}\npassword: {key.password}')

        logger.info(f'Key created: {key} for user {message.from_user.id}')
        await state.update_data(key_access_url=key.access_url)
        await message.answer(
            f"–í–∞—à –∫–ª—é—á –æ—Ç VPN:\n\n"
            f"```\n"
            f"{key.access_url}\n"
            f"```",
            parse_mode="Markdown",
            reply_markup=get_installation_button()
        )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = session.query(DbProcessor.User).filter_by(user_telegram_id=message.from_user.id).first()
            if not user:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                user = DbProcessor.User(
                    user_telegram_id=message.from_user.id,
                    subscription_status='active',
                    use_trial_period=False  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ, –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                )
                session.add(user)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_key = DbProcessor.Key(
                key_id=str(max_key_id + 1),
                user_telegram_id=message.from_user.id
            )
            session.add(new_key)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            session.commit()
        except Exception as e:
            session.rollback()
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        finally:
            session.close()

    except Exception as e:
        logger.error(f"Error processing successful payment: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: `@mickpear`",
            parse_mode="Markdown"
        )
        await state.clear()

@dp.callback_query(F.data == "installation_instructions")
async def send_installation_instructions(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–∏–º–µ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    data = await state.get_data()
    key_access_url = data.get("key_access_url", "URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
    instructions = (
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ VPN:\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OutLine:\n"
        "   - –î–ª—è Android: [–°—Å—ã–ª–∫–∞ –Ω–∞ Google Play](https://play.google.com/store/apps/details?id=org.outline.android.client&hl=ru)\n"
        "   - –î–ª—è iOS: [–°—Å—ã–ª–∫–∞ –Ω–∞ App Store](https://apps.apple.com/ru/app/outline-app/id1356177741)\n"
        "   - –î–ª—è Windows/Mac: [–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç](https://example.com)\n\n"
        "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"```\n"
        f"{key_access_url}\n"
        f"```"
        "3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º! üéâ"
    )
    await callback.message.answer(instructions, parse_mode="Markdown", disable_web_page_preview=True)
    await callback.answer()
    await state.clear()





@dp.callback_query(F.data == 'key_management_pressed')
async def process_key_management(callback: CallbackQuery):
    await callback.message.answer(
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏".'
    )

async def main() -> None:
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())


